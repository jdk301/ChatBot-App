{"ast":null,"code":"// import types\nimport { INPUT_SUCCESS, INPUT_FAIL, SESSION_SUCCESS, SESSION_FAIL, MESSAGE_SUCCESS, MESSAGE_FAIL } from \"../actions/types\"; // initial state\n\nconst initialState = {\n  messages: []\n}; // switch statement - update state\n\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  let {\n    messages\n  } = state;\n\n  switch (type) {\n    case INPUT_SUCCESS:\n      messages = [...messages, {\n        message: payload,\n        type: \"user\"\n      }];\n      return { ...state,\n        messages\n      };\n\n    case INPUT_FAIL:\n      return { ...state\n      };\n\n    case SESSION_SUCCESS:\n      localStorage.setItem(\"session\", payload[\"session_id\"]);\n      return { ...state\n      };\n\n    case SESSION_FAIL:\n      return { ...state\n      };\n\n    case MESSAGE_SUCCESS:\n      messages = [...messages, {\n        message: payload,\n        type: \"bot\"\n      }];\n      return { ...state,\n        messages\n      };\n\n    case MESSAGE_FAIL:\n      return { ...state\n      };\n\n    default:\n      return { ...state\n      };\n  }\n});","map":{"version":3,"sources":["/Users/jkim/Projects/Chatbot-App/client/src/reducers/watson.js"],"names":["INPUT_SUCCESS","INPUT_FAIL","SESSION_SUCCESS","SESSION_FAIL","MESSAGE_SUCCESS","MESSAGE_FAIL","initialState","messages","state","action","type","payload","message","localStorage","setItem"],"mappings":"AAAA;AACA,SACEA,aADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,eALF,EAMEC,YANF,QAOO,kBAPP,C,CASA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB,C,CAIA;;AACA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;AACA,MAAI;AAAEF,IAAAA;AAAF,MAAeC,KAAnB;;AAEA,UAAQE,IAAR;AACE,SAAKV,aAAL;AACEO,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAc;AAAEK,QAAAA,OAAO,EAAED,OAAX;AAAoBD,QAAAA,IAAI,EAAE;AAA1B,OAAd,CAAX;AACA,aAAO,EACL,GAAGF,KADE;AAELD,QAAAA;AAFK,OAAP;;AAIF,SAAKN,UAAL;AACE,aAAO,EACL,GAAGO;AADE,OAAP;;AAGF,SAAKN,eAAL;AACEW,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCH,OAAO,CAAC,YAAD,CAAvC;AACA,aAAO,EACL,GAAGH;AADE,OAAP;;AAGF,SAAKL,YAAL;AACE,aAAO,EACL,GAAGK;AADE,OAAP;;AAGF,SAAKJ,eAAL;AACEG,MAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAc;AAAEK,QAAAA,OAAO,EAAED,OAAX;AAAoBD,QAAAA,IAAI,EAAE;AAA1B,OAAd,CAAX;AACA,aAAO,EACL,GAAGF,KADE;AAELD,QAAAA;AAFK,OAAP;;AAIF,SAAKF,YAAL;AACE,aAAO,EACL,GAAGG;AADE,OAAP;;AAGF;AACE,aAAO,EACL,GAAGA;AADE,OAAP;AA/BJ;AAmCD,CAvCD","sourcesContent":["// import types\nimport {\n  INPUT_SUCCESS,\n  INPUT_FAIL,\n  SESSION_SUCCESS,\n  SESSION_FAIL,\n  MESSAGE_SUCCESS,\n  MESSAGE_FAIL,\n} from \"../actions/types\";\n\n// initial state\nconst initialState = {\n  messages: [],\n};\n\n// switch statement - update state\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  let { messages } = state;\n\n  switch (type) {\n    case INPUT_SUCCESS:\n      messages = [...messages, { message: payload, type: \"user\" }];\n      return {\n        ...state,\n        messages,\n      };\n    case INPUT_FAIL:\n      return {\n        ...state,\n      };\n    case SESSION_SUCCESS:\n      localStorage.setItem(\"session\", payload[\"session_id\"]);\n      return {\n        ...state,\n      };\n    case SESSION_FAIL:\n      return {\n        ...state,\n      };\n    case MESSAGE_SUCCESS:\n      messages = [...messages, { message: payload, type: \"bot\" }];\n      return {\n        ...state,\n        messages,\n      };\n    case MESSAGE_FAIL:\n      return {\n        ...state,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}